[{"title":"代码模板(真·蒟蒻)","url":"/2023/05/27/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF(%E7%9C%9F%C2%B7%E8%92%9F%E8%92%BB)/","content":"一.线段树（无优化）1.维护区间最大值(最小值)#include&lt;bits/stdc++.h&gt;#define int long long#define mid (l+r)/2#define lson l,mid,rt&lt;&lt;1#define rson mid+1,r,rt&lt;&lt;1|1using namespace std;int n,m,tag[2000005],mx[2000005];void pushup(int rt)&#123;\tmx[rt]=max(mx[rt&lt;&lt;1],mx[rt&lt;&lt;1|1]);&#125;void pushdown(int l,int r,int rt)&#123;\tint res=r-l+1;\ttag[rt&lt;&lt;1]+=tag[rt];\ttag[rt&lt;&lt;1|1]+=tag[rt];\tmx[rt&lt;&lt;1]+=tag[rt];\tmx[rt&lt;&lt;1|1]+=tag[rt];\ttag[rt]=0;&#125;void build(int l,int r,int rt)&#123;\tif(l==r)\t&#123;\t\tcin&gt;&gt;mx[rt];\t\treturn;\t&#125;\tbuild(lson);\tbuild(rson);\tpushup(rt);&#125;int query(int a,int b,int l,int r,int rt)&#123;\tif(a&lt;=l&amp;&amp;r&lt;=b)return mx[rt];\tint ans=-1;\tif(tag[rt])pushdown(l,r,rt);\tif(a&lt;=mid)ans=max(ans,query(a,b,lson));\tif(b&gt;mid)ans=max(ans,query(a,b,rson));\treturn ans;&#125;void mupdate(int l,int r,int rt,int a,int b,int num)&#123;\tif(a&lt;=l&amp;&amp;r&lt;=b)\t&#123;\t\tmx[rt]=max(num,mx[rt]);        tag[rt]+=num;\t\treturn;\t&#125;\tif(tag[rt])pushdown(l,r,rt);\tif(a&lt;=mid)mupdate(lson,a,b,num);\tif(b&gt;mid)mupdate(rson,a,b,num);\tpushup(rt);&#125;signed main()&#123;\tcin&gt;&gt;n&gt;&gt;m;\tbuild(1,n,1);\tfor(int i=1;i&lt;=m;i++)\t&#123;\t\t\t&#125;&#125;\n\n2.维护区间和#include&lt;bits/stdc++.h&gt;#define int long long#define mid (l+r)/2#define lson l,mid,rt&lt;&lt;1#define rson mid+1,r,rt&lt;&lt;1|1using namespace std;int n,m,sum[2000005],tag[2000005];void pushup(int rt)&#123;\tsum[rt]=sum[rt&lt;&lt;1]+sum[rt&lt;&lt;1|1];&#125;void pushdown(int l,int r,int rt)&#123;\tint res=r-l+1;\ttag[rt&lt;&lt;1]+=tag[rt];\ttag[rt&lt;&lt;1|1]+=tag[rt];\tsum[rt&lt;&lt;1]+=tag[rt]*(res-(res&gt;&gt;1));\tsum[rt&lt;&lt;1|1]+=tag[rt]*(res&gt;&gt;1);\ttag[rt]=0;&#125;void build(int l,int r,int rt)&#123;\tif(l==r)\t&#123;\t\tcin&gt;&gt;sum[rt];\t\treturn;\t&#125;\tbuild(lson);\tbuild(rson);\tpushup(rt);&#125;int query(int a,int b,int l,int r,int rt)&#123;\tif(a&lt;=l&amp;&amp;r&lt;=b)return sum[rt];\tint ans=0;\tif(tag[rt])pushdown(l,r,rt);\tif(a&lt;=mid)ans+=query(a,b,lson);\tif(b&gt;mid)ans+=query(a,b,rson);\treturn ans;&#125;void mupdate(int l,int r,int rt,int a,int b,int num)&#123;\tif(a&lt;=l&amp;&amp;r&lt;=b)\t&#123;\t\tsum[rt]+=(r-l+1)*num;\t\ttag[rt]+=num;\t\treturn;\t&#125;\tif(tag[rt])pushdown(l,r,rt);\tif(a&lt;=mid)mupdate(lson,a,b,num);\tif(b&gt;mid)mupdate(rson,a,b,num);\tpushup(rt);&#125;signed main()&#123;\tcin&gt;&gt;n&gt;&gt;m;\tbuild(1,n,1);\tfor(int i=1;i&lt;=m;i++)\t&#123;\t\t\t&#125;&#125;\n二.快速读写1.快读inline int read()&#123;    int x=0,f=1;\tchar ch=getchar();    while(!isdigit(ch))&#123;if (ch==&#x27;-&#x27;)f=-1;ch=getchar();&#125;    while(isdigit(ch))&#123;x=x*10+ch-48;ch=getchar();&#125;    return x*f;&#125;\n2.快输inline int write(int x)&#123;    if(x&lt;0)&#123;x=~(x-1);putchar(&#x27;-&#x27;);&#125;    if(x&gt;9)write(x/10);    putchar(x%10+&#x27;0&#x27;);&#125;\n三.最短路1.迪杰斯特拉#include&lt;bits/stdc++.h&gt;#define pi pair&lt;int,int&gt;#define inf 2147483647using namespace std;int head[100005],s,cnt=0,n,m,vis[100005],dis[100005];struct edge&#123;\tint u,v,w,nxt;&#125;e[200005];priority_queue &lt;pi,vector&lt;pi&gt;,greater&lt;pi&gt; &gt;q;void adde(int a,int b,int c)&#123;\te[++cnt].u=a;\te[cnt].v=b;\te[cnt].w=c;\te[cnt].nxt=head[a];\thead[a]=cnt;&#125;void dijkstra()&#123;\twhile(!q.empty())\t&#123;\t\tint u=q.top().second;\t\tq.pop();\t\tif(vis[u])continue;\t\tvis[u]=1;\t\tfor(int i=head[u];i;i=e[i].nxt)\t\t&#123;\t\t\tint v=e[i].v;\t\t\tif(dis[v]&gt;dis[u]+e[i].w)\t\t\t&#123;\t\t\t\tdis[v]=dis[u]+e[i].w;\t\t\t\tif(vis[v]==0)q.push(make_pair(dis[v],v)); \t\t\t&#125;\t\t&#125;\t&#125;&#125;int main()&#123;\tscanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;s);\tfor(int i=1;i&lt;=m;i++)\t&#123;\t\tlong long a,b,c;\t\tscanf(&quot;%lld%lld%lld&quot;,&amp;a,&amp;b,&amp;c);\t\tadde(a,b,c);\t&#125;\tfor(int i=1;i&lt;=n;i++)dis[i]=inf; \tdis[s]=0;\tq.push(make_pair(0,s));\tdijkstra();\tfor(int i=1;i&lt;=n;i++)printf(&quot;%d &quot;,dis[i]);&#125;\n四.质数1.素数筛（欧拉筛）#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;int n,p[10000005],cnt=0;bool np[10000005];void eusi(int x)&#123;\tnp[0]=np[1]=1;\tfor(int i=2;i&lt;=x;i++)\t&#123;\t\tif(!np[i])p[++cnt]=i;\t\tfor(int j=1;j&lt;=cnt;j++)\t\t&#123;\t\t\tif(i*p[j]&gt;x)break;\t\t\tnp[i*p[j]]=1;\t\t\tif(i%p[j]==0)break;\t\t&#125;\t&#125;&#125;signed main()&#123;\tcin&gt;&gt;n;\teusi(n);\tfor(int i=1;i&lt;=cnt;i++)cout&lt;&lt;p[i]&lt;&lt;&quot; &quot;;&#125;\n@其它1.快速幂int fastpow(int x,int n,int mod)&#123;\tint res = 1;\twhile(n)\t&#123;\t\tif(n&amp;1)res=res*x%mod;\t\tx=x*x%mod;\t\tn&gt;&gt;=1;\t&#125;\treturn res;&#125;\n\n2.字符串字典序排序bool cmp(char a[10],int l1,char b[20],int l2)&#123;    for(int i=0;i&lt;min(l1,l2);i++)if(a[i]!=b[i])return a[i]&lt;b[i];    return l1&lt;l2;&#125;\n","categories":["信息学"],"tags":["Code"]},{"title":"网页工具","url":"/2023/05/27/%E7%BD%91%E9%A1%B5%E5%B7%A5%E5%85%B7/","content":"1.国内版ChatGPTChatGPT \n\n\n2.随机图片生成（Lorem Picsum）Lorem Picsum \n\n3.数学工具集（Geogebra）Geogebra \n\n\n4.BiliBili工具（IBiliBili）IBiliBili \n","categories":["实用性"],"tags":["Tools","Collections"]},{"title":"随笔","url":"/2023/05/27/%E9%9A%8F%E7%AC%94/","content":"\n  5df0d130e4f0548e32e2b4f7f765568bcfa7a869e8f75ff3a90e675d9523f28cde12e8bde385afae80a193373eab90dee314c413d547c716f89eeda850733826e374cf5c87a9deb2cb64f7077b80dda0f583e1645f557ce923ffcef321dd604476efe95b794642260b8deadb3f82b30334129dba89a74d3a5357957f2757a2de111c36819d5addf6a0072d3030e3347941f28df33c91f65ee0534c40316484b33091e35eeccda48137f8e6d69577004e52edab53516d7aad3593d04d1ecb719ac0901b0d132ed7f7fef4e63bed3621785d7e98bca6ef9d5c05354f9bfff20e8ef8598c966f8f90cbfdb67954de3558603b591a35af3f2def564c3dd00e9fa414689a7ddc765318384917fe7f41a7b39415761c97c8e29172fce0fa5162a1fde667d02dbbb80180c8bd2715b42aad5f7a7f8d3f015a56b8d60964c04f8d2106c3e94b9600117fd9a62f381d6e41e41ad9ae3f41d6bafb4bf0fbcfd3a13a561f71fc15c5c0ef41d6fae8c589dc7f8f2ff00ca50eea62a61e508f320da71f9a43b06a4e4ee91a3333c2b0ae1a337703ffacf86d38d3b7ef7d74e86796bb32b07aae698f3d9895821de5a0892cfaffc05cb405b33ae4c075b7588575bd34b6f845df03cde4a09fdf9fb0cf9bd2c1828638ebd462d6fb1f55ce2662d0cd18387e491efdf804ece21d78b350515d118c632c4345bd2bb70e312acd7a2af4df4c97741b5fb7fcfabc8de27cef66b6a4cce9d9b97a297369d1e0f2963cf2089ad4b245d75ccd2b77ff57b9139e683c03276f3aaaccf64a457b8dbc931cd1b7d789170d02e075b1cc5d429af32599b03fe06d6d5691159ca68c735d75ce2a7910d18f71ffee851d7935039bbcd9fb70575515565fc692007551ec85075bc0223abc92e35f939a1901892fc322962fb2c49bf52fb37379e7c2b0bd34b60ace5aa10b6b5c704b6b71e83f0e46e0fe7130af026c153a89311ed3ac79b4eccd0a2bade44a2605f35bf4ea33dff7cc0659af2c20359765dc1e6279fc0d673270c94e5792c07499cc7d7627cced7a3e6d80a3c905a1cca513220265898912157bc99cd2116705f58544d2ecc21dfa99a40476944fa6598eb516943cb875f7952d6b12b5589d642346dbc40289efee3e71f15f8405b849d13a35d982c93090ff9387929efbb6249d8c37237be2be1d3a89b74326e7658b3da1c6af9fdb9a2b2ed97eb317df9cfeccde6395a7e25e0a7ea3a808e3b533bca04bec1bd22564cc379d7038e02271ed8f9e00eb93f7e88bbd9a09368ea034c92436035016c12d0dbae3a4598cfcbd398b06493fb5402c394c07c04bfcbbca4d6c916fcf7297c65eb83181fffd38739072aaf273ea78c3f1bae4f5276c8db197aa61e9a04d1153018339ceaa7fd150a0cf67a5492a3bd607d701d30f2262fd287a3fbf724f5c9ff4607117a57a7ed12a447bc0af8ec25334b3ab31e1550db528681875a934b2d6fd7f3ab1c6c4e4ff524a6158a3eb8b33d581586450701976dc32bd7bb655f03691811574d494a8bba0356c4553b7be076e614688d9838410c36c5831bfd096f125ff6c727864537a8a5498b8a4a637644a3ce313a636db169bd7d6be01e4db16eecc380fcc737a700024bde3f3ababa1f68ac570a6c2b72380dc4f180405e0ebc17ef75767749463bce1e91a1e6456faacaaa14e87a308b3df28eaa58eacba2e8779d939b72097ef18398663babfe2e1c63d3209c3b547a270e9480fee8475cce25e091d917f09d79ec4dd6ec869d9aa710ec44912fba23cd296e5ad8f571766e03a04b76cb41f4b5aad8632e56fa9e0939123acc92768637b814e7c0c2ac56105b6fe25bd9e0966ff9c0377319df827abdda614325ee530307fc8751ee5c15dfc7dda91f5423ca86d7e85182e7999150308174bcecb8a5109ce01825948ff9aec3bf4eeeba83c7222e3366ab93d4d7fa1578f1c62d5eddb95b43d448b195402ddb6fa1c9654f3ed9af1b8a66d8ba455367319f2bfa438c4c078a31f4525dde3fcaccf3f5221177ddbd9986f53e2478cb68fc97c63e594d7318621ec98eeaf20e42de278a8385da8cc3dba8369512c2c7e6a11a79d7a6b86df400fa73833272b3e7d9a684e6ee81079b8d1b7a556bda35b5144609ca35a5537965ccc135202e390ed3873ced63353760838b227309ea48f346b760d57ba1544857124c1469450f171c5b717ed77d78acedfd608eb57e9de0e2a9ddb511150e0885b107fb03f82540b6f43511aebf91035b30ceedc2ca6292f49780c3b47ff5a5f2343da5ef0ccf8c7e4c52a86127466aca860ec59eca0a9d376bfbb3310de068740df51beb08dae79592dbeb1fa0661ac301d3da03467b943a15e5fbe2fb79d5f0d76864190ce18bca02ccecbebdc7120b23077a8417eb4101c4a381eeeb283f6047e418c6279580780e96f680ce219e8a4d7ffc1cbe46cb1f41d59b82dc041d449b401c0774805a6d514b27e6a774d1d3456b1f2987fc5a3a16801f2f6100a13da7a85b7c82322433697491258aebb7fabb4e59f25df76294b0f54d16c6a2abfcb5162aa8fc5e4abfbc5a4417a9bfcd4250ac1850625238b3e1871fc0eb7ef6981c6072998af15e1db6c724e7b498fba217ae461da2ea7614255dea8b8f0d096c734be2f38a0d7bcce5f89282d4c99e8f691fcdf8584b839653c5b9aa34cfce57ecef11f170ea6f185b24add5d71ff8ffce55bacc7631a70ce3a8f982e1a76759dd3d9133988c41aa3642ac4edb72a918060b969643341b3c3e54375e288b6d48682821f8510752ce2f1b87f625ef5b709dc0611d80ee6d6717b8ff9de86b828b65deeb73ca56402301b1ffbb7c4bf2265cdd740209d9f3cc80e2e58ac9384a0b088cc4930a6d4195bf77df52fd82a61c0c92a22de5956648b6c9cb5d1dbd08a9f3d505a18cdec82db476903706870a4eefbe7b34468686b864cc928b576030821dfc944af8e538a87089dcbd5f7499f7ea37a598e66d96c1c8408a99c12dd7d95f5e6ea703e160856fd497cd23f6949e9e1c45648a6bc872b32160c3b3dd7899dc57cf3372f1df5ea876aae3f897fe1e02a71335a8b9c619df745e843e86d8a61f62754d55d900e29ac1fd1a128b81dec895d2fc269ea1b8e46ccbc90bcdbf70796b43cc3dc9795e2ef106f585bd2aaaa02b4297d760ed4b7c5beea2bc829c43580d705cd80a0fc1d62e024afa2dd1e22f676e01e296fbc379bc1d0813d87f6c49b915fc12ec055a958daa6e8c49b3a7ab41dab801ce189ebef011e898f35446ad4d9c81ed861e43dbae06a0302b4bf19db96d19729630445152082702b9365bea4080ee8cd0b80fcb8bbc077cd910f\n  \n    \n      \n      \n        输入密码以解锁.\n      \n      \n        \n        \n      \n    \n  \n\n","categories":["个人"],"tags":["Emotions"]}]